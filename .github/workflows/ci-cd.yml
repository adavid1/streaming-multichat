name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and type checking
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Lint server
        run: cd server && npm run lint

      - name: Lint client
        run: cd client && npm run lint

      - name: Type check shared
        run: cd shared && npx tsc --noEmit

      - name: Type check server
        run: cd server && npx tsc --noEmit

      - name: Type check client
        run: cd client && npx tsc --noEmit

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Build shared types
        run: npm run build:shared

      - name: Build client
        run: npm run build:client

      - name: Build server
        run: npm run build:server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            client/dist/
            server/dist/
            shared/dist/
          retention-days: 7

  # Test Docker build
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Run npm audit (server)
        run: cd server && npm audit --audit-level=high
        continue-on-error: true

      - name: Run npm audit (client)
        run: cd client && npm audit --audit-level=high
        continue-on-error: true

  # Integration test (basic smoke test)
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Start server in background
        run: |
          cd server
          nohup npm start &
          echo $! > server.pid
        env:
          PORT: 8787
          NODE_ENV: test

      - name: Wait for server to start
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8787/health; do sleep 2; done'

      - name: Test health endpoint
        run: |
          curl -f http://localhost:8787/health
          curl -f http://localhost:8787/api/status

      - name: Stop server
        run: |
          if [ -f server/server.pid ]; then
            kill $(cat server/server.pid) || true
          fi

  # Build and publish Docker image
  docker-publish:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    needs: [build, docker-build, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Release workflow (on published releases)
  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [build, docker-build, integration]
    if: github.event_name == 'release'
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci
          cd ..
          npm run build

      - name: Create release archive
        run: |
          mkdir -p release-assets
          tar -czf release-assets/multichat-${{ github.event.release.tag_name }}.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env' \
            .

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-assets/multichat-${{ github.event.release.tag_name }}.tar.gz
          asset_name: multichat-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip